1.什么是面向对象:
	答:面向对象是程序的一种设计方式,利于提高程序的重用性,使程序结构更加清晰,主要特征:封装,继承,多态
2.Session和Cookie的区别是什么,请从协议和产生的原因与作用说明
	答:1.http无状态协议.不能区分用户是否从同一个网站上来的,同一个用户请求不同的页面不能看做是同一个用户
	   2.SESSION存储在服务器端,COOKIE保存在客户端,SESSION比较安全,COOKIE可以修改,SESSION依赖COOKIE进行传递
	   禁用COOKIE之后,session不能正常使用.session的缺点,保存在服务端,每次读取都从服务区进行读取,对服务器有资源消耗.Session保存在服务端的文件或数据库中,默认存在文件中,文件路径由php配置文件的session.save_path来指定,Session文件是公有的
3.HTTP状态中的302,403,500代码含义
	答:1xx.消息 系列
	   2xx.成功 系列
	   3xx.重定向 系列
	   4xx.请求错误 系列
	   5xx.服务端错误 系列

	   302:临时转移成功,请求的内容已转移到新的位置
	   403:禁止访问  401:未授权
	   500:服务器内部错误
4.Linux下建立压缩包,解压缩包的命令
	答:Tar.gz
	打包: tar czf file.tar.gz file.txt
	解压: tar xzf file.tar.gz
	   Bz2
	打包:bzip2 [-k] 文件
	解压:bunzip2 [-k] 文件
	   Gzip(只对文件,不保留原文件)
	打包:gzip file1.txt
	解压:gunzip file1.txt.gz
	   Zip(-r 对目录)
	打包:zip file1.zip file1.txt
	解压:unzip file1.zip

	c:创建
	j:bzip2的解压缩,格式为*.tar.bz2
	z:*.tar.gz的格式 (没有z的话就可以 *.tar)
	v:压缩或解压的时候显示文件名
	f:文件名
	t:查看压缩包里面有哪些文件
	p:保留备份数据的原本权限和属性
	x:解压缩

	-C 解压缩到指定目录
5.请写出数据类型(int char varchar datetime text)的意思;请问varchar和char有什么区别?
	答:MYISAM类型不支持事务;表锁,易产生碎片,要经常优化;读写速度较快,而Inn哦DB类型支持十五,行锁,有奔溃回复能力.读写速度比MyISAM慢;
6.不使用cookie向客户端发送一个cookie
	答:session_start();生成一个常量SID,当cookie开启时,这个常量为空,当cookie关闭时,这个常量中存储了PHPSESSID的值.通过URL后加一个SID参数来传递SESSIONID的值,从而使客户端页面可以适应session里面的值.

	当客户端开启cookie和服务端开启session,浏览器第一次请求,服务器会向浏览器端发送一个cookie里面存储sessionid,当浏览器第二次请求时,会把已经存在的cookie一起提交到服务器端

7.简述Cookie的设置以及获取过程
	答:Setcookie(cookie_name,value[,expire_time,domain,secure]);
		$_COOKIE('name');
8.isset()和empty()的区别
	答:isset判断变量是否存在,可以传入多个变量.若其中一个变量不能存在则返回假 //isset($a, $b, ...)
	empty判断变量是否为空为假,只能传一个变量

9.如何在页面之间传递变量
	答:$_GET,$_POST,$_COOKIE,$_SESSION,隐藏表单
10.匹配url的正则
	答:'/^(https?|ftps?):\/\/(www)\.([^\.\/]+)\.(com|cn|org)(\/[\w-\.\/\?\%\&\=]*)?/i'
11.冒泡排序
	function bubble_sort($arr){
		$len = count($arr);
		if($len < 2){
			return $arr;
		}
		for($i = 0; $i < $len; $i++){
			for($j = $ + 1; $j < $len; $j++{
				if($arr[$i] > $arr[j]){
					$temp = $arr[$i];
					$arr[$i] = $arr[$j];
					$arr[$j] = $temp;
				}
			}
		}
		return $arr;
	}
12.请说明传值和传参的区别.什么时候传值,什么时候传参?
	答:传值:对变量的copy
		传引用:操作变量本身
		对于大型的字符串或对象来说,最好传引用
13.在PHP中error_reporting的报错级别并且返回当前级别
14.用正则协议个验证邮件编码
	答:$pattern = '/^[0-9a-zA-Z]+@[0-9a-zA-Z]+(\.[0-9a-zA-Z]+){1,3}$/'
	preg_match($pattern,$email);
15:请用PHP描述快速排序算法
	function quickSort($arr){
		$len = count($arr);
		if($len < 2){
			return $arr;
		}
		for($i = 1; $i < $len; $i++){
			if($arr[$i] <= $arr[0]){
				$left_arr[] = $arr[$i];
			}else{
				$right_arr[] = $arr[$i];
			}
		}
		if(count($left_arr) > 1){
			$left = quickSort($left_arr);
		}
		$new_arr = $left;
		$new_arr[] = $arr[0];
		if(count($right_arr) > 1){
			$right_arr = quickSort($right_arr);
		}
		for($i = 0; $i < count($right_arr); $i++){
			$new_arr[] = $right_arr[$i];
		}
		return $new_arr;
	}
16.内置排序
	1.sort //升序
	2.rsort //降序
	3.asort //根据value,升序
	4.arsort //根据value,降序
	5.ksort //根据key,升序
	6.krsort //根据key,降序
17.用php写出显示客户端ip和服务器ip的代码
	答:客户端ip $_SERVER['REMOTE_ADDR'];
	服务器ip  $_SERVER['SERVER_ADDR'];
18.include:有返回值 (包含文件不存在时,不会立即终止)
	require:无返回值 (速度快,但是包含文件不存在时会fatal error终止)
19.获得文件扩展名
	答:1.substr(strrchr($str, '.'), 1);
	   2.substr($str,strrpos($str, '.')+1);
	   3.end(explode('.', $str));
20.打印前一天的时间格式
	答:date('Y-m-d H:i:s', strtotime('-1 days'));
21.sql语句考虑安全性
	答:1.防止sql注入,对特殊字符进行转义,过滤或者使用预编译sql语句绑定
		2.使用最小权限原则,特别是不要使用root账号,分不同的动作或者操作建立不同的账户
		3.当sql出错时,不要把出错的信息暴露到客户端
		4.
22.优化mysql数据库方法
	答:1.选取适当的字段,非空的字段一定要设置为not null
		2.使用链接 join 代替子查询
		3.使用连个 union 查询 代替手动创建临时表
		4.尽量减少 like 关键字和通配符
		5.使用事务和外键
23.对于大流量的网站,你会采用什么方法来解决访问量
	答:1.首先确认服务器硬件是否满足当前的流量
		2.优化数据库的访问
		3.禁止外部盗链
		4.使用不同的主机分流
		5.使用流量分析统计
24.mysql_fetch_row和mysql_fetch_array
	答:返回的都是数组,区别是mysql_fetch_row返回的数组只包含值,下标是0,1,2
					mysql_fetch_array即有下标0,1,2也有FETCH_ASSOC
25.连接数据库
	1.$dblink = mysql_connect($dblocalhost,$dbusername,$dbpassword);
	2.$dblink = mysqli_connect($dblocalhost,$dbusername,$dbpassword);
	3.$dblink = new PDO("mysql:host='$dblocalhost';dbname='$dbname'", $dbusername, $dbpassword);
	$dblink->exec("SET names 'utf8'");
	$query = $dblink->query($sql);
	$query->setFetchMode(PDO::FETCH_ASSOC);
	$res = $query->fetchAll(); // fetch();
26.MySql数据库的引擎有哪些?
	答:M有ISAM,ISAM,HEAP,InnoDB,BOB,CVS
27.mysql引擎中的MyISAM和InnoDB的区别
	答:基本的差别:MyISAM不支持事务处理等高级处理,而InnoDB支持.但是MyISAM执行速度更快
	区别:
		1.存储结构
			MyISAM:每个MyISAM在磁盘上存储成三个文件,第一个文件的名字以表的名字开始,扩展名指出文件类型
					.frm存储表定义,.MYD存储数据文件,.MYI存储索引文件
			InnoDB:所有的表存在同一个数据文件中,表的大小受限于操作系统文件的大小,一般为2GB
		2.存储空间
			MyISAM:可被压缩,存储空间较小.支持三种不同的存储格式(默认,动态表,压缩表)
			InnoDB:需要更多的内存和存储,它会在主内存中建立专用的缓冲池用于高速缓冲数据和索引
		3.可移植性,备份,恢复
			MyISAM:数据是以文件的形式存储,所以在跨平台的数据转移会很方便,在备份和恢复时可单独针对某个表进行操作.
			InnoDB:拷贝数据文件,备份binlog,或者mysqldump,在数据量达到几十G时就很慢
		4.事务支持
			MyISAM:强调是性能,每次查询具有原子性,其执行速度比InnoDB更快,但是不支持事务
			InnoDB:提供事务支持,外键等高级数据库功能,具有事务(commit),回滚(rollback),
			奔溃修复能力(crash recovery capabilities)的事务安全(transaction-safe(ACID compliant))型表
		5.AUTO_INCREMENT
			MyISAM: 可以和其他字段一起建立联合索引,引擎的自动增长列 必须是索引,如果是组合索引,自动增长可以不是一列,可以根据前激烈进行排序后递增
			InnoDB:必须包含只有该字段的索引.殷勤的自动增长必须是索引,如果是组合索引页必须是组合索引的第一列
		6.表锁差异
			MyISAM: 只支持表级锁,用户在操作myisam表的时候,insert,delete,update,select都会自动加锁(如果加锁不满足insert的并发,可以在尾部插入数据)
			InnoDB: 支持事务和行级锁,是InnoDB的最大特色.行锁大幅度提高了多用户并发操作的能力,但是行锁只有在where的主键是有效的,非主键的where都会锁全表
		7.全文索引
			MyISAM: 支持FULLTEXT类型的全文索引
			InnoDB: 不支持FULLTEXT类型的全文索引,但是InnoDB可以使用sphinx插件支持全文索引,并且效果更好
		7.表主键
			MyISAM: 允许没有任何索引和主键的表存在,索引都是保存行的地址
			InnoDB: 如果没有主键或者非空唯一索引,就会自动生成一个6字节的主键,用户不可见
		9.表具体的行数
			MyISAM: 保存有表的总行数,如果select count(*) from table;会直接取出该值
			InnoDB: 没有保存表的总行数,如果是同select count(*) from table;会遍历整个表,消耗相当大,但是加了where条件后,myisam和innodb处理方式一样
		10.CURD
			MyISAM: 如果执行大量的select,MyISAM是更好的选择
			InnoDB: 如果你的数据大量执行INSERT或UPDATE,处于性能方面的考虑,应该使用InnoDB表,如果要清空表,用truncate table
		11.外键
			MyISAM: 不支持
			InnoDB: 支持
28.redis和memcache缓存的区别
	答:1.数据类型
			Redis:数据类型丰富,支持set,list的类型
			Memcache: 支持简单数据类型,需要客户端自己处理复杂对象
		2.持久性
			Redis:支持数据落地持久化存储
			Memcache: 不支持数据持久存储
		3.分布式存储
			Redis:支持master-slave的复制模式
			Memcache: 可以使用一致性hash的散分布式
		4.value大小不同
			Memcache: 是一个内存缓存,key的长度效域256个字符,单个item效域1M,不适合虚拟机使用
		5.数据一致性不同
			Redis:使用的是单线程模型,保证了数据按顺序提交
			Memcache: 需要使用cas保证数据一致性,(check and set)是一个确保并发一致性的机制,属于"乐观锁"(版本号一致就执行,不一样就不执行)
		6.CPU利用
			Redis:单线程模型只能使用一个CPU,可以开启多个REDIS进程

		总结:1.Redis中,并不是所有的数据都一直存储在内存中的,这是和Memcache相比最大的区别
			2.Redis不仅仅支持简单的k=>v类型的数据,同时还有list,set,hash
			3.Redis支持数据的备份,即master-slave模式的数据备份
			4.Redis支持数据的持久化,可以将内存中的数据保持在磁盘中,重启的时候可以再次加载进行使用
			Redis在很多方面具备数据库的特征,而Memcache只是简单的k=>v缓存
		总结2:1.存储方式
			2.数据支持类型
			3.底层模型
			4.运行环境不同,redis只支持linux
			5.memcache只能当作缓存
29.sql里面判断
	答: select (case where a>b then a else b),(case where b>c then b else c) from table
30.安装linux系统中,用netconfig程序会对网络进行配置,需要输入哪些内容
	答:会让用户输入: 主机名, 域名, 域名服务器, IP地址, 网关地址, 子网掩码
31.PHP如何写接口给人家调用?
	答:public function authenticationApi($data, $url){
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_HEADER, 0);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_POSTFIFLDS, $data);
		$info = curl_exec($ch);
		curl_close($ch);
		return $info;
	}
32.用header()实现页面404错误提示功能
	答:header("HTTP/1.1 404 Not Found");
33.heredoc的结构和写法
	答:echo <<<EOT
		<html>
		EOT;
		最后一行 必须写结束标识符和 ;  不能有其他任何符号
34.js判断是否屏蔽弹窗
	答:var tcWin = window.open('http://baidu.com','_blank');
	if(tcWin == null){
		alert('弹窗被屏蔽啦!');
	}
35.序列化和反序列化
	答:serialize()
		unserialize()
36.select username from members order by posts desc limit 10;
37.以apache模块的方式安装php,在文件http.conf首先用语句
	LoadModule php5_module "path/to/php5apache2.dll"
	动态装载php模块,然后用语句
	AddType application/x-http-php .php
38.数据库中的事务是什么
	答:事务就是一系列的操作,这些操作完成一项任务.这些操作里面只要有一个操作没有成功,事务就操作失败,开始回滚时间.即撤销前面的操作,这样可以保证数据的一致性.而且可以把操作暂时放在缓存里,等所有操作都提交到数据库,这样保证费时的操作都是有效操作
39.apache和nginx的优缺点
	nginx轻量级,比apache占用更少的内存以及资源,抗并发,ngixn处理请求是异步非阻塞的,而apache则是阻塞型的,在高并发下ngixn 能保持低资源,低消耗,高性能.apache相对于nginx的优点,rewrite比nginx的rewrite强大,少bug,稳定
	需要性能用nginx
	需要稳定用apache
40.计算日期间的天数
	答:1.$day1 = '2002-1-1';
	$day2 = '2003-1-1';
	$d1 = new dateTime($day1);
	$d2 = new dateTime($day2);
	echo $d1->diff($d2)->day2;
	2.echo (strtotime($day2) - strtotime($day2)) / (24 * 3600);
41.preg_replace($pattren,'替换格式,每个括号都可已用\\数字来代表和nginx相似',$数据);
42.邮箱: /^[0-9a-zA-Z_-]+@[0-9a-zA-Z_-]+(\.[a-zA-Z0-9_-]+)+$/
43.大写:strtoupper 字符串首字符大写:ucfirst 把字符串中每个单词转为大写ucwords
	小写:strtolower 字符串首字符小写:lcfirst
44.修改sessionid的存续时间
	答:setcookie(session_name(),session_id(),time()+$lifeTime, '/');
		session_set_cookie_params($lifeTime);
		修改php.ini  session.gc_maxlifetime 参数的值来改变sessionid的值
45.Session的api
	答: session_start();
		$_SESSION['key'] = $value;
		echo $_SESSION['key']
		unset($_SESSION['key']);
		session_destroy();
46.PDO预防sql注入
	答:通过预处理sql
		$sql = "select * from table where id = ? and uid = ?";
		$st= $pdo->prepare($sql);
		//传参
			//值传递
		$st->bindValue(1,3);
		$st->bindValue(2,5);
			//变量传递
		$id = 3;
		$uid = 5
		$st->bindParam(1,$id);
		$st->bindParam(2,$uid);
		//执行语句
		$st->execute();
		$result = $st->fetchAll();
		//先传模板,再传变量,解决的sql注入
		先将预处理的sql模板传给mysql_server处理 (结构和语义)
		再将变量传过去



重点:
	1.并发处理
		1.数据库
			1.分表
				答:将一个大表按照一定的规则分解成具有独立存储空间的实体表(子表),每个表对应三个文件.MYD,.MYI,frm
				这些文件可以在同一块磁盘上,也可以在不同的机器上
				app读写的时候按照定义好的规则得到对应的子表名
			2.分区
				答:分区和分表相识,只不过是把数据分段划分到多个位置,可以是同一块磁盘也可以是不同的机器.区别就是,分区了 表还是那张表,只不过数据分开放了.
				app读写的时候操作的还是大表名,db去组织分区的数据
			3.如果数据多,但是访问量不大的话,建议分区,不过分区和分表是可以相互配合的
			4.merge TYPE=MERGE UNION=(user1,user2) INSERT_METHOD=LAST
			5.得提前建很多表
		2.MQ
			1.通过消息队列来实现
				1.解耦:a系统本来和b,c系统串行的,先通过a把消息压进消息队列就不用管了,谁需要用到消息谁就用
				2.最终一致性:1.分布式事务:太贵2.记录和补偿:在不确定事件之前先把事件记录下来,成功了则删除记录,失败或者不确定不删除,然后把这些记录的时间 重复到成功为止
					基于第二点:具体来说,本地事务维护业务变化和通知消息,一起落地(失败则回滚),然后RPC(远程过程调用)到达broken,在broken成功落地后,rpc返回成功,本地删除失败记录,否则一直轮询重复记录,
				3.广播:比如说发布产品变更消息,谁关心谁接入
				4.错峰与流控:上下游处理问题的能力的不同,web前端能每秒承受上千万的请求,只需要多加点机器,再待见一些LVS负载均衡设备和Nginx等即可,但数据库的处理能力有限,即使使用SSD加分库分表,单机的处理能力有限 在万级     所以利用中间系统来处理上下游系统能力的差距问题,让下游有时间再处理消息
			2.设计一个消息队列
				1.基于消息的通信模式,从关注处理到关注通知
				2.队列的本质:一次RPC变为两次RPC,内容转储,选择合适的时机投递
				3.不同队列的特性:
					1.消息堆积能力
					2.丢失消息概率
					3.重复消息可能
					4.顺序消息保证
					5.事务特性
					6.错峰流控能力
					7.延迟敏感性
					8.最终一致性
					9.满消费处理
				4.队列设计重点
					1.RPC通信协议
					2.存储选型
					3.消费关系处理
					4.实现事务
					5.防丢/防重
					6.批量/异步与性能
				5.实现队列的基本功能
					1.RPC通信协议
						负载均衡,服务发西安,通信协议,序列话协议...
						用RPC框架:Thrift或者Dubbo
						或者用Memcache或Redis重写一套RPC框架也行
						服务端 提供两个RPC服务,一个用来接收消息,一个用来确认消息
					2.高可用
						依赖于转储,,Dubbo本身就有 服务自动发西安,负载均衡
					3.服务端承载消息堆积的能力
						消息达到服务端如果不经过任何处理就到接收者了,broker就是去了它的意义,
						把消息转储下来,存在内存,或者分布式KV里,存在磁盘里,存在数据库里,总的来说就两种,持久化和非持久化.但不是所有的都需要持久化,对于投递性能大于可靠性的要求,且数量极大,消息不落地暂时村内存,尝试几次failover,最终投递出去也未尝不可
		3.缓存
			1.把重复的数据缓存下来
		4.读写分离
			1.读多写少的情况下,弄主从架构,主库写入,从库读取,读写分离
			过程:
				1.配置主服务器
					1.修改配置文件,开启binlog日志,vim /etc/my.cnf [mysqld] log_bin=localhost-bin
						通过show variables like 'log_bin';
						列出日志: show master logs;
						清空: reset master;
						刷新: flush logs
						查看指定日志: show binlog events in '日志名'
					2.修改配置文件,设置一个server_id=数字(数字唯一)
						[mysqld] server_id = 1
					3.重启服务
					4.创建用户(让从服务器来复制数据)
						create user 'copyer'@'%' IDENTIFIED BY 'password'
						grant all on.to 'copyer'@'%'
						FLUSH PRIVILEGES
					5.关闭防火墙或者开放3306端口
				2.配置从服务器
					1.修改配置文件,设置server_id(数字必须唯一)
					2.重启服务
					3.通过change master语句来指定同步主位置,先切换到主服务器并且查看主服务器信息,通过
					Sql:show master status;
					然后切换到从服务器
					Sql: change master to
						master_host='192.168.0.3',master_user='copyer',master_password='上面设置的密码',master_log_file='上一条语句查到的日志名称File',master_log='上一条语句查到的Position';
					4.从服务器开始同步
						Sql: start slave;
					5.从服务器验证
						Sql: show slave status\G
						Slave_IO_Running和Slave_SQL_Running都为Yes则成功
					注意事项:如果出现错误,重新登录MySQL重启slave服务
							如果虚拟机克隆的两个系统,则mysql一样,也会报uuids问题,需要删除Mysql数据目录下的auto.cnf然后重启
		5.系统拆分
			1.把系统拆分为多个子系统,每个子系统连一个数据库
	2.设计模式
	3.Git
	4.订单流程处理